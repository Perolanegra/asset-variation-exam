import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { DestroyRef, Injectable, inject } from '@angular/core';
import {
  catchError,
  filter,
  map,
  Observable,
  shareReplay,
  throwError,
  OperatorFunction,
  UnaryFunction,
  pipe,
  distinctUntilChanged,
  Subject,
} from 'rxjs';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';

/**
 * Operador customizado para RxJs que garante que apenas stream
 * de dado válido chegue ao `next`.
 *
 * Filtra observable com valor `0` ou `undefined` e evita que stream
 * de dado prossiga caso valor seja filtrado.
 *
 * @returns Observable de valor que não seja `0` e nem `undefined`.
 */
export function filter0ish<T>(): UnaryFunction<
  Observable<T | 0 | undefined>,
  Observable<T>
> {
  return pipe(
    filter((value) => value != 0) as OperatorFunction<T | 0 | undefined, T>
  );
}

@Injectable({
  providedIn: 'root',
})
export class AppService {
  private url = 'http://localhost:3000/api/asset';
  private http = inject(HttpClient);
  private destroyRef = inject(DestroyRef);

  public readonly mySubject: Subject<any> = new Subject();

  requestAssetToChart(
    selectedAsset: string,
    startTimestamp: number,
    endTimestamp: number
  ): void {
    this.http
      .get<any>(
        `${this.url}/${selectedAsset}symbol=${selectedAsset}&period1=${startTimestamp}&period2=${endTimestamp}&interval=1d`,
        { withCredentials: true }
      )
      .pipe(
        takeUntilDestroyed(this.destroyRef),
        distinctUntilChanged(),
        map((data) => this.mySubject.next(data)),
        shareReplay(1),
        catchError(this.handleError)
      )
      .subscribe();
  }

  getSelectedAsset(selectedAsset: string): void {
    // const now = new Date();
    // const startDate = new Date();
    // startDate.setDate(now.getDate() - 30);

    // const startTimestamp = Math.floor(startDate.getTime() / 1000);
    // const endTimestamp = Math.floor(now.getTime() / 1000);
    const data = this.mock.find((item) => item.name === selectedAsset)?.data;
    setTimeout(() => this.mySubject.next(data), 100); // timeout com fins pra animação de construção do gráfico.
    // this.requestAssetToChart(selectedAsset, startTimestamp, endTimestamp);
  }

  public get assets(): string[] {
    return ['BTC-USD', 'PETR4.SA', 'GC%3DF']; // alguns ativos como exemplo..
  }

  private handleError = (err: HttpErrorResponse): Observable<never> => {
    const errorMessage =
      err.error instanceof ErrorEvent
        ? `Algum erro ocorreu: ${err.error.message}`
        : `Servidor retornou o código: ${err.status}, A mensagem é: ${err.message}`;

    console.error(errorMessage);
    return throwError(() => errorMessage);
  };

  get mock() {
    return [
      {
        name: 'PETR4.SA',
        data: [
          [
            1700222400000, 35.83000183105469, 36.91999816894531,
            35.81999969482422, 36.709999084472656,
          ],
          [
            1700481600000, 36.77000045776367, 37.220001220703125,
            36.27000045776367, 36.7400016784668,
          ],
          [
            1700568000000, 36.540000915527344, 36.540000915527344,
            35.90999984741211, 36.36000061035156,
          ],
          [
            1700654400000, 34.900001525878906, 35.15999984741211, 34.25,
            35.15999984741211,
          ],
          [
            1700740800000, 35.130001068115234, 35.25, 34.810001373291016,
            35.16999816894531,
          ],
          [
            1700827200000, 34.97999954223633, 35.81999969482422,
            34.709999084472656, 35.27000045776367,
          ],
          [1701086400000, 35, 35.400001525878906, 34.75, 35.06999969482422],
          [
            1701172800000, 35.16999816894531, 35.619998931884766,
            35.150001525878906, 35.599998474121094,
          ],
          [
            1701259200000, 35.900001525878906, 36.029998779296875,
            34.939998626708984, 35.22999954223633,
          ],
          [
            1701345600000, 35.459999084472656, 35.91999816894531,
            35.2400016784668, 35.90999984741211,
          ],
          [
            1701432000000, 35.720001220703125, 36, 35.529998779296875,
            35.66999816894531,
          ],
          [
            1701691200000, 35.439998626708984, 35.54999923706055,
            34.849998474121094, 34.90999984741211,
          ],
          [
            1701777600000, 34.91999816894531, 35.16999816894531,
            34.68000030517578, 34.75,
          ],
          [1701864000000, 34.54999923706055, 34.79999923706055, 33.5, 33.5],
          [
            1701950400000, 33.650001525878906, 34.18000030517578,
            33.040000915527344, 33.41999816894531,
          ],
          [
            1702036800000, 33.709999084472656, 34.540000915527344,
            33.47999954223633, 34.4900016784668,
          ],
          [
            1702296000000, 34.459999084472656, 34.689998626708984,
            34.2400016784668, 34.36000061035156,
          ],
          [
            1702382400000, 34.54999923706055, 34.599998474121094,
            33.79999923706055, 34.08000183105469,
          ],
          [
            1702468800000, 34.209999084472656, 34.619998931884766,
            34.13999938964844, 34.56999969482422,
          ],
          [
            1702555200000, 35, 35.7400016784668, 34.84000015258789,
            35.31999969482422,
          ],
          [
            1702641600000, 35.279998779296875, 35.790000915527344, 35,
            35.400001525878906,
          ],
        ],
      },
      {
        name: 'BTC-USD',
        data: [
          [
            1700179200000, 36164.82421875, 36704.484375, 35901.234375,
            36596.68359375,
          ],
          [
            1700265600000, 36625.37109375, 36839.28125, 36233.3125,
            36585.703125,
          ],
          [
            1700352000000, 36585.765625, 37509.35546875, 36414.59765625,
            37386.546875,
          ],
          [
            1700438400000, 37374.07421875, 37756.8203125, 36882.53125,
            37476.95703125,
          ],
          [1700524800000, 37469.16015625, 37631.140625, 35813.8125, 35813.8125],
          [
            1700611200000, 35756.5546875, 37856.98046875, 35670.97265625,
            37432.33984375,
          ],
          [
            1700697600000, 37420.43359375, 37643.91796875, 36923.86328125,
            37289.62109375,
          ],
          [
            1700784000000, 37296.31640625, 38415.33984375, 37261.60546875,
            37720.28125,
          ],
          [
            1700870400000, 37721.4140625, 37892.4296875, 37617.41796875,
            37796.79296875,
          ],
          [
            1700956800000, 37796.828125, 37820.30078125, 37162.75,
            37479.12109375,
          ],
          [
            1701043200000, 37454.19140625, 37559.35546875, 36750.12890625,
            37254.16796875,
          ],
          [
            1701129600000, 37247.9921875, 38368.48046875, 36891.08984375,
            37831.0859375,
          ],
          [
            1701216000000, 37826.10546875, 38366.11328125, 37612.6328125,
            37858.4921875,
          ],
          [
            1701302400000, 37861.1171875, 38141.75390625, 37531.140625,
            37712.74609375,
          ],
          [1701388800000, 37718.0078125, 38954.109375, 37629.359375, 38688.75],
          [
            1701475200000, 38689.27734375, 39678.9375, 38652.59375,
            39476.33203125,
          ],
          [
            1701561600000, 39472.20703125, 40135.60546875, 39298.1640625,
            39978.390625,
          ],
          [
            1701648000000, 39978.62890625, 42371.75, 39978.62890625,
            41980.09765625,
          ],
          [
            1701734400000, 41986.265625, 44408.6640625, 41421.1484375,
            44080.6484375,
          ],
          [
            1701820800000, 44080.0234375, 44265.76953125, 43478.08203125,
            43746.4453125,
          ],
          [
            1701907200000, 43769.1328125, 44042.58984375, 42880.6484375,
            43292.6640625,
          ],
          [
            1701993600000, 43293.13671875, 44705.515625, 43125.296875,
            44166.6015625,
          ],
          [
            1702080000000, 44180.01953125, 44361.2578125, 43627.59765625,
            43725.984375,
          ],
          [
            1702166400000, 43728.3828125, 44034.625, 43593.28515625,
            43779.69921875,
          ],
          [
            1702252800000, 43792.01953125, 43808.375, 40234.578125,
            41243.83203125,
          ],
          [
            1702339200000, 41238.734375, 42048.3046875, 40667.5625,
            41450.22265625,
          ],
          [
            1702425600000, 41468.46484375, 43429.78125, 40676.8671875,
            42890.7421875,
          ],
          [
            1702512000000, 42884.26171875, 43390.859375, 41767.08984375,
            43023.97265625,
          ],
          [1702598400000, 43028.25, 43087.82421875, 41692.96875, 41929.7578125],
          [
            1702684800000, 41937.7421875, 42664.9453125, 41723.11328125,
            42240.1171875,
          ],
          [
            1702819020000, 42236.109375, 42255.15625, 41650.83984375,
            41840.7109375,
          ],
        ],
      },
      {
        name: 'GC%3DF',
        data: [
          [1700197200000, 1982.5, 1984, 1979.800048828125, 1981.5999755859375],
          [1700370000000, null, null, null, null],
          [
            1700456400000, 1978.699951171875, 1979.4000244140625,
            1969.699951171875, 1977.699951171875,
          ],
          [1700542800000, 1990.699951171875, 2005.5, 1988.5, 1999.300048828125],
          [
            1700629200000, 1999.0999755859375, 1999.4000244140625, 1991,
            1991.4000244140625,
          ],
          [
            1700715600000, 1991.9000244140625, 1991.9000244140625, 1991.5,
            1991.5,
          ],
          [
            1700836200000, 1991.9000244140625, 2002.199951171875, 1991.5,
            2002.199951171875,
          ],
          [1700974800000, null, null, null, null],
          [
            1701061200000, 2011.699951171875, 2011.800048828125,
            2011.699951171875, 2011.800048828125,
          ],
          [
            1701147600000, 2040.5999755859375, 2042.699951171875,
            2039.699951171875, 2039.699951171875,
          ],
          [
            1701234000000, 2041.699951171875, 2052.10009765625, 2036,
            2047.0999755859375,
          ],
          [
            1701320400000, 2046.0999755859375, 2047.0999755859375,
            2033.0999755859375, 2038.0999755859375,
          ],
          [1701406800000, 2038.300048828125, 2073.199951171875, 2036, 2071],
          [1701579600000, null, null, null, null],
          [
            1701666000000, 2075.300048828125, 2130.199951171875, 2021,
            2024.0999755859375,
          ],
          [1701752400000, 2035.0999755859375, 2037, 2010.199951171875, 2018.5],
          [1701838800000, 2019.9000244140625, 2035.800048828125, 2019, 2030.5],
          [
            1701925200000, 2029.199951171875, 2034.9000244140625, 2024,
            2029.9000244140625,
          ],
          [
            1702011600000, 2031.699951171875, 2033.0999755859375, 1995,
            1998.300048828125,
          ],
          [1702184400000, null, null, null, null],
          [
            1702270800000, 2004.0999755859375, 2004.199951171875,
            1977.199951171875, 1978,
          ],
          [
            1702357200000, 1984.199951171875, 1994.199951171875,
            1977.800048828125, 1977.800048828125,
          ],
          [1702443600000, 1978.5, 2024.800048828125, 1975, 1982.300048828125],
          [
            1702530000000, 2024.699951171875, 2040.0999755859375,
            2024.300048828125, 2030.199951171875,
          ],
          [
            1702616400000, 2032.5999755859375, 2043.4000244140625,
            2018.300048828125, 2021.0999755859375,
          ],
        ],
      },
    ];
  }
}
